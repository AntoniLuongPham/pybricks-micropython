# global options
dist: xenial
language:
  - c
compiler:
  - gcc
services:
  - docker
cache:
  directories:
    - "${HOME}/persist"
env:
  global:
    - MAKEOPTS="-j4"

# define the successive stages
stages:
  - name: test

# define the jobs for the stages
# order of the jobs has longest running first to optimise total time
jobs:
  include:
    # unix coverage
    - stage: test
      env: NAME="unix coverage build and tests"
      install:
        # a specific urllib3 version is needed for requests and cpp-coveralls to work together
        - sudo pip install -Iv urllib3==1.22
        - sudo pip install cpp-coveralls
        - gcc --version
        - python3 --version
        - cd ${HOME}
        - if [ -n "$TRAVIS_TAG" ]; then
              git clone --depth=10 --branch=v1.9.4+pybricks${TRAVIS_TAG:1} --recursive https://github.com/pybricks/micropython;
          else
              git clone --depth=10 --recursive https://github.com/pybricks/micropython;
          fi
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C mpy-cross
        - make ${MAKEOPTS} -C ports/unix deplibs
        - make ${MAKEOPTS} -C ports/unix coverage
        # run the main test suite
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests -d thread)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --emit native)
        - (cd tests && MICROPY_CPYTHON3=python3 MICROPY_MICROPYTHON=../ports/unix/micropython_coverage ./run-tests --via-mpy -d basics float)
        # test when input script comes from stdin
        - cat tests/basics/0prelim.py | ports/unix/micropython_coverage | grep -q 'abc'
        # run coveralls coverage analysis (try to, even if some builds/tests failed)
        # - (cd ports/unix && coveralls --root ../.. --build-root . --gcov $(which gcov) --gcov-options '\-o build-coverage/' --include py --include extmod)
      after_failure:
        - (cd tests && for exp in *.exp; do testbase=$(basename $exp .exp); echo -e "\nFAILURE $testbase"; diff -u $testbase.exp $testbase.out; done)

    # Pybricks ev3dev
    - stage: test
      env: NAME="Pybricks ev3dev build"
      before_install:
        - pyenv versions
        - sudo apt-get update -qq || true
        # fonts-roboto-slab was not introduced until bionic
        - wget -P $HOME http://mirrors.kernel.org/ubuntu/pool/universe/f/fonts-roboto-slab/fonts-roboto-slab_1.100263+20170512-1_all.deb
      install:
        - npm install -g jfrog-cli-go
        - pyenv shell 3.6.7
        - pip3 install --user Sphinx sphinx_rtd_theme
        - sudo dpkg -i $HOME/fonts-roboto-slab_1.100263+20170512-1_all.deb
        - sudo apt-get install qemu-user-static inkscape fonts-lato
        - cd ${HOME}
        - if [ -n "$TRAVIS_TAG" ]; then
              git clone --depth=10 --branch=v1.9.4+pybricks${TRAVIS_TAG:1} --recursive https://github.com/pybricks/micropython;
          else
              git clone --depth=10 --recursive https://github.com/pybricks/micropython;
          fi
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - bricks/ev3dev/docker/setup.sh armel
      script:
        - docker exec --tty pybricks-ev3dev_armel make
        - docker exec --tty pybricks-ev3dev_armel make test
        - make -C doc html
        - cd lib/fake-pybricks && python3 setup.py sdist &&
          export FAKE_PYBRICKS_VERSION=$(python3 setup.py --version); cd -
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "${HOME}/micropython/ports/pybricks/bricks/ev3dev/pybricks-micropython"
          pybricks-ev3dev/$TRAVIS_REPO_SLUG/build$TRAVIS_JOB_NUMBER/
        - tar -C ${HOME}/micropython/ports/pybricks/doc/build html -czf html.tar.gz
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "html.tar.gz" pybricks-ev3dev/$TRAVIS_REPO_SLUG/build$TRAVIS_JOB_NUMBER/
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          --props "pypi.name=fake-pybricks;pypi.version=$FAKE_PYBRICKS_VERSION"
          "${HOME}/micropython/ports/pybricks/lib/fake-pybricks/dist/fake-pybricks-$FAKE_PYBRICKS_VERSION.tar.gz"
          pybricks-pypi/fake-pybricks/$FAKE_PYBRICKS_VERSION/
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER


    # Pybricks Move Hub
    - stage: test
      env:
        - NAME="Pybricks Move Hub build"
        - PATH="/opt/gcc-arm-none-eabi-7-2018-q2-update/bin:${PATH}"
      install:
        - npm install -g jfrog-cli-go
        - cd ${HOME}
        - wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - sudo tar -C /opt -xf gcc-arm-none-eabi-7-2018-q2-update-linux.tar.bz2
        - if [ -n "$TRAVIS_TAG" ]; then
              git clone --depth=10 --branch=v1.9.4+pybricks${TRAVIS_TAG:1} --recursive https://github.com/pybricks/micropython;
          else
              git clone --depth=10 --recursive https://github.com/pybricks/micropython;
          fi
        - cd micropython/ports/pybricks
        - git checkout --recurse-submodules ${TRAVIS_PULL_REQUEST_BRANCH:-${TRAVIS_COMMIT}}
        - cd ../..
      script:
        - make ${MAKEOPTS} -C ports/pybricks/bricks/MOVEHUB
      after_success:
        - jfrog rt config pybricks --url https://pybricks.jfrog.io/pybricks --access-token $JFROG_SECRET
        - jfrog rt upload --build-name $TRAVIS_REPO_SLUG --build-number $TRAVIS_JOB_NUMBER
          "${HOME}/micropython/ports/pybricks/bricks/MOVEHUB/build/firmware.bin"
          pybricks-powered-up/$TRAVIS_REPO_SLUG/build$TRAVIS_JOB_NUMBER/
        - jfrog rt build-collect-env $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
        - jfrog rt build-add-git $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER $TRAVIS_BUILD_DIR
        - jfrog rt build-publish --build-url $TRAVIS_JOB_WEB_URL $TRAVIS_REPO_SLUG $TRAVIS_JOB_NUMBER
